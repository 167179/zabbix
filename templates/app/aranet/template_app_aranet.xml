<?xml version="1.0" encoding="UTF-8"?>
<zabbix_export>
   <version>5.2</version>
   <date>2020-09-17T07:06:24Z</date>
   <groups>
      <group>
         <name>Templates/Applications</name>
      </group>
   </groups>
   <templates>
      <template>
         <template>Template App Aranet Cloud</template>
         <name>Template App Aranet Cloud</name>
         <description>Template tooling version used: 0.38</description>
         <groups>
            <group>
               <name>Templates/Applications</name>
            </group>
         </groups>
         <applications>
            <application>
               <name>Aranet</name>
            </application>
            <application>
               <name>Zabbix raw items</name>
            </application>
         </applications>
         <items>
            <item>
               <name>Aranet: Get metrics</name>
               <type>INTERNAL</type>
               <key>zabbix[uptime]</key>
               <history>1h</history>
               <trends>0</trends>
               <value_type>TEXT</value_type>
               <applications>
                  <application>
                     <name>Zabbix raw items</name>
                  </application>
               </applications>
               <preprocessing>
                  <step>
                     <type>JAVASCRIPT</type>
                     <params>var Aranet = {
    params: {
        apiEndpoint: '{$ARANET.API.ENDPOINT}',
        username: '{$ARANET.API.USERNAME}',
        password: '{$ARANET.API.PASSWORD}',
        space_name: '{$ARANET.API.SPACE_NAME}',
    },
    auth_token: undefined,
    space_id: undefined,

    request: function (method, query, data) {
        var response,
            request = new CurlHttpRequest(),
            url = (!Aranet.params.apiEndpoint.endsWith('/')
                    ? Aranet.params.apiEndpoint + '/'
                    : Aranet.params.apiEndpoint)
                + query;

        request.AddHeader('Content-Type: application/json');

        if (Aranet.auth_token !== null) {
            request.AddHeader('Authorization: Bearer ' + Aranet.auth_token);
        }

        if (typeof data !== 'undefined') {
            data = JSON.stringify(data);
        }

        switch (method) {
            case 'get':
                response = request.Get(url, data);
                break;

            case 'post':
                response = request.Post(url, data);
                break;

            default:
                throw 'Unsupported HTTP request method: ' + method;
        }

        Zabbix.Log(4, '[ Aranet scraper ] Received response with status code ' + request.Status() + ': ' + response);

        if (request.Status() &lt; 200 || request.Status() &gt;= 300) {
            var message = 'Request failed with status code ' + request.Status();

            message += ': ' + response;
            throw message;
        }

        if (response !== null) {
            try {
                response = JSON.parse(response);
            }
            catch (error) {
                Zabbix.Log(4, '[ Aranet scraper ] Failed to parse response received from Aranet Cloud');
                response = null;
            }
        }

        return {
            status: request.Status(),
            response: response
        };
    },

    login: function() {
        var result,
            data = {
                login: Aranet.params.username,
                passw: Aranet.params.password
            };

        result = Aranet.request('post', 'user/login', data);
        if (typeof result.response !== 'object'
            || typeof result.response.auth === 'undefined'
            || result.status != 200) {
            throw 'Cannot login to Aranet Cloud. Check debug log for more information.';
        }

        Aranet.auth_token = result.response.auth;
        
        var spaces = result.response.spaces;
        for (var key in spaces) {
            if (spaces[key] == Aranet.params.space_name) {
                Aranet.space_id = key;
                break;
            }
        }

        return result.response;
    },

    getMetrics: function() {
        var result = Aranet.request('get', 'metrics/' + Aranet.space_id);
        
        if (typeof result.response !== 'object'
            || typeof result.response.data === 'undefined'
            || result.status != 200) {
            throw 'Cannot get metrics data from Aranet Cloud. Check debug log for more information.';
        };

        return result.response;
    },

    getSensors: function() {
        var result = Aranet.request('get', 'sensors/' + Aranet.space_id + '?fields=metrics,telemetry,name');
        
        if (typeof result.response !== 'object'
            || typeof result.response.data === 'undefined'
            || result.status != 200) {
            throw 'Cannot get sensors data from Aranet Cloud. Check debug log for more information.';
        };

      return result.response;
    }
}

var processed_units = {},
    processed_sensors = [];

try {
    Aranet.login();

    var raw_metrics = Aranet.getMetrics(),
        raw_sensors = Aranet.getSensors();

    var items = raw_metrics.data.items;
    for (var item_idx in items) {
        var unitName,
            units = items[item_idx].units;

        for (var unit_idx in units) {
            unitName = units[unit_idx].name;
            if (units[unit_idx].selected) {
                break
            }
        }

        processed_units[items[item_idx].id] = {
            name: items[item_idx].name,
            unit: unitName
        }
    }

    var items = raw_sensors.data.items;
    for (var item_idx in items) {
        var sensor_metrics = [],
            metrics = items[item_idx].metrics;
            telemetry = items[item_idx].telemetry;

        for (var m_idx in metrics) {
            unit = processed_units[metrics[m_idx].id];
            sensor_metrics.push({
                name: unit.name,
                unit: unit.unit,
                value: metrics[m_idx].v
            });
        }
        for (var t_idx in telemetry) {
            unit = processed_units[telemetry[t_idx].id];
            sensor_metrics.push({
                name: unit.name,
                unit: unit.unit,
                value: telemetry[t_idx].v
            });
        }
        processed_sensors.push({
            id: items[item_idx].id,
            name: items[item_idx].name,
            metrics: sensor_metrics
        })
    }
    
    return JSON.stringify(processed_sensors);
}
catch (error) {
    Zabbix.Log(3, '[ Aranet scraper ] ERROR: ' + error);
    throw 'Scraping failed: ' + error;
}</params>
                  </step>
               </preprocessing>
            </item>
         </items>
         <discovery_rules>
            <discovery_rule>
               <name>Sensors discovery</name>
               <type>DEPENDENT</type>
               <key>aranet.sensor.discovery</key>
               <delay>0</delay>
               <filter>
                  <evaltype>AND</evaltype>
                  <conditions>
                     <condition>
                        <macro>{#SENSOR}</macro>
                        <value>{$ARANET.LLD.FILTER.SENSOR.MATCHES}</value>
                        <formulaid>A</formulaid>
                     </condition>
                     <condition>
                        <macro>{#SENSOR}</macro>
                        <value>{$ARANET.LLD.FILTER.SENSOR.NOT_MATCHES}</value>
                        <operator>NOT_MATCHES_REGEX</operator>
                        <formulaid>B</formulaid>
                     </condition>
                  </conditions>
               </filter>
               <description>Discovery for Aranet Cloud sensors</description>
               <item_prototypes>
                  <item_prototype>
                     <name>{#METRIC}: {#SENSOR} ({#UNIT})</name>
                     <type>DEPENDENT</type>
                     <key>sensor["{#SENSOR}","{#METRIC}","{#ID}"]</key>
                     <delay>0</delay>
                     <history>7d</history>
                     <value_type>FLOAT</value_type>
                     <application_prototypes>
                        <application_prototype>
                           <name>Aranet: {#SENSOR}</name>
                        </application_prototype>
                     </application_prototypes>
                     <preprocessing>
                        <step>
                           <type>JSONPATH</type>
                           <params>$[?(@.id == "{#ID}" &amp;&amp; @.name == "{#SENSOR}")].metrics[?(@.name == "{#METRIC}")].value.first()</params>
                        </step>
                     </preprocessing>
                     <master_item>
                        <key>zabbix[uptime]</key>
                     </master_item>
                  </item_prototype>
               </item_prototypes>
               <host_prototypes/>
               <master_item>
                  <key>zabbix[uptime]</key>
               </master_item>
               <preprocessing>
                  <step>
                     <type>JAVASCRIPT</type>
                     <params>var input = JSON.parse(value),
    output = [];

for (var sensor_idx in input) {
    var metrics = input[sensor_idx].metrics;
    for (var metric_idx in metrics) {
        output.push(
            {
                '{#ID}':  input[sensor_idx].id,
                '{#SENSOR}': input[sensor_idx].name,
                '{#METRIC}': metrics[metric_idx].name,
                '{#UNIT}': metrics[metric_idx].unit
            }
        )
    }
}

return JSON.stringify(output);</params>
                  </step>
               </preprocessing>
            </discovery_rule>
         </discovery_rules>
         <macros>
            <macro>
               <macro>{$ARANET.API.ENDPOINT}</macro>
               <value>https://aranet.cloud/api</value>
            </macro>
            <macro>
               <macro>{$ARANET.API.PASSWORD}</macro>
            </macro>
            <macro>
               <macro>{$ARANET.API.SPACE_NAME}</macro>
            </macro>
            <macro>
               <macro>{$ARANET.API.USERNAME}</macro>
            </macro>
            <macro>
               <macro>{$ARANET.LLD.FILTER.SENSOR.MATCHES}</macro>
               <value>.+</value>
               <description>Filter of discoverable sensors</description>
            </macro>
            <macro>
               <macro>{$ARANET.LLD.FILTER.SENSOR.NOT_MATCHES}</macro>
               <value>CHANGE_IF_NEEDED</value>
               <description>Filter to exclude discoverable sensors</description>
            </macro>
         </macros>
      </template>
   </templates>
</zabbix_export>
